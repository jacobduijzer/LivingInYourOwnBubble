// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CattleInformationSystem.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IncomingAnimalEventsFeature : object, Xunit.IClassFixture<IncomingAnimalEventsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "IncomingAnimalEvents.feature"
#line hidden
        
        public IncomingAnimalEventsFeature(IncomingAnimalEventsFeature.FixtureData fixtureData, CattleInformationSystem_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Incoming Animal Events", "Animal events, coming from the Netherlands Enterprise Agency (RVO) should be proc" +
                    "essed into the database.\nTODO: work with real ubn\'s and life numbers?", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
    #line hidden
#line 6
        testRunner.Given("a farm of type \'BreedingForMilk\', with UBN \'21234567890\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "Life Number",
                        "10987654321"});
            table1.AddRow(new string[] {
                        "Gender",
                        "Female"});
            table1.AddRow(new string[] {
                        "Ubn",
                        "21234567890"});
            table1.AddRow(new string[] {
                        "Reason",
                        "Birth"});
            table1.AddRow(new string[] {
                        "EventDate",
                        "2017-03-23"});
#line 7
        testRunner.Given("an animal, born today", ((string)(null)), table1, "Given ");
#line hidden
#line 14
        testRunner.And("it is added to the incoming events table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Being born")]
        [Xunit.TraitAttribute("FeatureTitle", "Incoming Animal Events")]
        [Xunit.TraitAttribute("Description", "Being born")]
        public void BeingBorn()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Being born", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 17
        testRunner.Then("it should be processed and stored in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Farm",
                            "Reason",
                            "Order",
                            "EventDate",
                            "Category"});
                table2.AddRow(new string[] {
                            "21234567890",
                            "Birth",
                            "1",
                            "2017-03-23",
                            "101"});
#line 18
        testRunner.And("have the events(s)", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Sold and bought")]
        [Xunit.TraitAttribute("FeatureTitle", "Incoming Animal Events")]
        [Xunit.TraitAttribute("Description", "Sold and bought")]
        public void SoldAndBought()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sold and bought", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 23
        testRunner.When("it is sold today, to a UBN of type \'Milk\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
        testRunner.Then("it should be processed and stored in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Farm",
                            "Reason",
                            "Order",
                            "Date",
                            "Category"});
                table3.AddRow(new string[] {
                            "BreedingForMilk",
                            "Birth",
                            "1",
                            "Today",
                            "101"});
                table3.AddRow(new string[] {
                            "BreedingForMilk",
                            "Departure",
                            "2",
                            "Today",
                            "101"});
                table3.AddRow(new string[] {
                            "Milk",
                            "Arrival",
                            "1",
                            "Today",
                            "101"});
#line 25
        testRunner.And("have the events(s)", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IncomingAnimalEventsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IncomingAnimalEventsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
