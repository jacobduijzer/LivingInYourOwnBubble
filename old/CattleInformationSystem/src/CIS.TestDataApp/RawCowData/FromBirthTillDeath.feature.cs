// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CIS.TestDataApp.RawCowData
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FromBirthTillDeathFeature : object, Xunit.IClassFixture<FromBirthTillDeathFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FromBirthTillDeath.feature"
#line hidden
        
        public FromBirthTillDeathFeature(FromBirthTillDeathFeature.FixtureData fixtureData, CIS_TestDataApp_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RawCowData", "From Birth Till Death", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a cow")]
        [Xunit.TraitAttribute("FeatureTitle", "From Birth Till Death")]
        [Xunit.TraitAttribute("Description", "Adding a cow")]
        public void AddingACow()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a cow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields",
                            "Value"});
                table1.AddRow(new string[] {
                            "LifeNumber",
                            "NL1234"});
                table1.AddRow(new string[] {
                            "Gender",
                            "Female"});
                table1.AddRow(new string[] {
                            "DateOfBirth",
                            "2012-03-05T12:00:00"});
                table1.AddRow(new string[] {
                            "DateCalved",
                            "2016-02-14T12:00:00"});
                table1.AddRow(new string[] {
                            "DateOfDeath",
                            "2021-01-01T12:00:00"});
                table1.AddRow(new string[] {
                            "LifeNumberOfMother",
                            ""});
#line 4
        testRunner.Given("the cow", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "LocationNumber",
                            "OccuredAt",
                            "Reason"});
                table2.AddRow(new string[] {
                            "00000001",
                            "2012-03-05T12:00:00",
                            "Born"});
                table2.AddRow(new string[] {
                            "00000001",
                            "2015-09-02T12:00:00",
                            "Sold"});
                table2.AddRow(new string[] {
                            "00000002",
                            "2015-09-02T12:00:00",
                            "Arrived"});
                table2.AddRow(new string[] {
                            "00000002",
                            "2015-10-02T12:00:00",
                            "Sold"});
                table2.AddRow(new string[] {
                            "00000003",
                            "2015-10-02T12:00:00",
                            "Arrived"});
                table2.AddRow(new string[] {
                            "00000003",
                            "2016-02-14T12:00:00",
                            "Calved"});
                table2.AddRow(new string[] {
                            "00000003",
                            "2021-01-01T12:00:00",
                            "Died"});
#line 12
        testRunner.And("with the following events", ((string)(null)), table2, "And ");
#line hidden
#line 22
        testRunner.When("sending it to the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
        testRunner.Then("the cow data should be accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Reason",
                            "OccuredAt",
                            "Category"});
                table3.AddRow(new string[] {
                            "Born",
                            "2012-03-05T12:00:00",
                            "10"});
                table3.AddRow(new string[] {
                            "Transition",
                            "2015-09-02T12:00:00",
                            "10"});
                table3.AddRow(new string[] {
                            "Sold",
                            "2015-09-02T12:00:00",
                            "10"});
                table3.AddRow(new string[] {
                            "Arrived",
                            "",
                            "10"});
#line 24
        testRunner.And("the animal history should look like this", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FromBirthTillDeathFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FromBirthTillDeathFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
