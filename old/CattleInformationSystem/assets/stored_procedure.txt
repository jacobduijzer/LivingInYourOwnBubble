Voor elk dier:

1. Verwijder alle records van dit dier
2. Zoek Geboorte, als die niet bekend is, nieuw dier
3. Maak dier aan, maak geboorte record aan
4. Alle aan en verkopen op juiste volgorde, maak records aan

===

Aan- en verkopen
Afkalving
Overgangen
Sterfte
Volgorde zetten

=======

CREATE OR REPLACE PROCEDURE process_cow_event(in lifeNumber text)
LANGUAGE 'plpgsql'
AS $$
DECLARE 
	arrival_event constant int = 1;	
	default_animal_category_id constant int = 5;
	animal_category_id int;
	birth_record record;
	cow_id int = 0;
	raw_cow_event record;
	orderNr int = 0;
	location_record record;
	animal_category_record record;
	age_record record;
BEGIN
	
	-- SEARCH BIRTH RECORD
	SELECT *
	INTO birth_record
	FROM "RawCowData", "RawCowEventData"	
	WHERE "RawCowData"."Id" = "RawCowEventData"."RawCowDataId"	
	AND "Reason" = 0
	AND "LifeNumber" = lifeNumber;
	
	IF FOUND THEN	
		-- DELETE ALL RECORDS FOR THIS ANIMAL
		DELETE FROM "Cows" WHERE "LifeNumber" = lifeNumber;

		RAISE NOTICE 'Gender: %, LocationNumber: %, Reason: %, OccuredAt: %', birth_record."Gender", birth_record."LocationNumber", birth_record."Reason", birth_record."OccuredAt"; 

		-- CREATE COW, GET ID
		CALL insert_cow(birth_record."LifeNumber", birth_record."Gender", birth_record."OccuredAt", cow_id);
		RAISE NOTICE 'Cow id: %', cow_id;

		-- GET RAW EVENTS FOR ANIMAL
		FOR raw_cow_event IN SELECT "Id", "LocationNumber", "OccuredAt", "Reason", "RawCowDataId"
								FROM public."RawCowEventData"
								WHERE "Reason" IN (0, 1, 2)
								ORDER BY "OccuredAt"
		LOOP
			RAISE NOTICE 'event record';

			-- Reason = Arrived? Get Farm Production Target
			-- If Not Found: Default (Milk)
			IF raw_cow_event."Reason" = arrival_event THEN
				RAISE NOTICE 'ARRIVAL, GET PRODUCTION TARGET';

				SELECT *
				INTO location_record
				FROM "FarmLocations"
				WHERE "LocationNumber" = raw_cow_event."LocationNumber";
				IF FOUND THEN
					RAISE NOTICE 'production target: %', location_record."ProductionTarget";
					-- Get animal category
					-- TODO: Create function

					SELECT
						INTO age_record				
							DATE_PART('year', AGE(now(), birth_record."OccuredAt")) AS years,
							DATE_PART('month', AGE(now(), birth_record."OccuredAt")) AS months,
							DATE_PART('day', AGE(now(), birth_record."OccuredAt")) AS days;

					IF age_record.years > 0 THEN
						RAISE NOTICE 'older than 1: %', age_record.years;
					ELSE
						IF age_record.months > 0 THEN
							RAISE NOTICE 'older than 14 days: %', age_record.months;
						ELSE
							IF age_record.days >= 14 THEN
								RAISE NOTICE 'older than 13 days: %', age_record.days;
							ELSE
								RAISE NOTICE 'use 0 days';
							END IF;
						END IF;
					END IF;
				ELSE
					RAISE NOTICE 'production target not found for %, create default milk record', raw_cow_event."LocationNumber";
					-- Create Animal Event Record
					INSERT INTO "CowEvent" ("OccuredAt", "Reason", "Order", "CowId", "FarmLocationId", "AnimalCategoryId")
					VALUES (raw_cow_event."OccuredAt", raw_cow_event."Reason", orderNr, cow_id, NULL, default_animal_category_id);
				END IF;
			END IF;

			orderNr = orderNr + 1;
		END LOOP;
	ELSE
		RAISE NOTICE 'Animal with life number % not found in raw data!', lifeNumber;
	END IF;
	
END;
$$;

CALL process_cow_event('NL1234');
=======


-- 	SELECT *
-- 	FROM "RawCowData", "RawCowEventData"
-- 	WHERE "RawCowData"."Id" = "RawCowEventData"."RawCowDataId"
-- 	ORDER BY "OccuredAt"
	
	
-- 	-- BORN
-- 


-- DEFAULT ProductionTarget = 1 (Milk)
-- Does location exist? otherwise Milk
DO
$$ 
DECLARE raw_cow_record record;
DECLARE new_cow_record record;
DECLARE location_record record;
DECLARE category_record record;
DECLARE cow_id int = 0;
BEGIN	
	-- SELECT COW RECORDS
	SELECT *
	INTO raw_cow_record
	FROM "RawCowData", "RawCowEventData"	
	WHERE "RawCowData"."Id" = "RawCowEventData"."RawCowDataId"	
	AND "Reason" = 0
	AND "LifeNumber" = 'NL1234';
	RAISE NOTICE 'Gender: %, LocationNumber: %, Reason: %, OccuredAt: %', raw_cow_record."Gender", raw_cow_record."LocationNumber", raw_cow_record."Reason", raw_cow_record."OccuredAt"; 
	
	-- CREATE COW, GET ID
	-- TODO: Update when existing, delete CowEvent records
	CALL insert_cow(raw_cow_record."LifeNumber", raw_cow_record."Gender", raw_cow_record."OccuredAt", cow_id);
	RAISE NOTICE 'Cow id: %', cow_id;
		
-- 	-- PRODUCTION TARGET
-- 	-- TODO: Default when not found
	SELECT * 
	INTO location_record
	FROM "FarmLocations"
	WHERE "LocationNumber" = raw_cow_record."LocationNumber";
	RAISE NOTICE 'ProductionTarget: %', location_record."ProductionTarget";
	
-- 	-- ANIMAL CATEGORY
	SELECT *
	FROM "AnimalCategories"
	INTO category_record
	WHERE "Gender" = raw_cow_record."Gender"
	AND "ProductionTarget" = location_record."ProductionTarget"
	AND "AgeInDays" = 0
	AND "AgeInMonths" = 0
	AND "AgeInYears" = 0
	LIMIT 1;
	RAISE NOTICE 'Animal Category: % (Id: %)', category_record."Category", category_record."Id";
	
-- 	-- CREATE FIRST CowEvent
-- 	-- TODO: FarmLocationId nullable
	INSERT INTO "CowEvent" ("OccuredAt", "Reason", "Order", "CowId", "FarmLocationId", "AnimalCategoryId")
	VALUES (raw_cow_record."OccuredAt", raw_cow_record."Reason", 1, cow_id, location_record."Id", category_record."Id");
	
END $$;

-- Calved
-- 	SELECT * 
-- 	FROM "RawCowData", "RawCowEventData"
-- 	WHERE "RawCowData"."Id" = "RawCowEventData"."RawCowDataId"
-- 	AND "Reason" = 4
	
	-- Arrived & Sold
	-- Ordering: LocationNumber, then Arrived, Sold	
-- 	SELECT * 
-- 	FROM "RawCowData", "RawCowEventData"
-- 	WHERE "RawCowData"."Id" = "RawCowEventData"."RawCowDataId"
-- 	AND "Reason" IN (1, 2)
-- 	ORDER BY "OccuredAt", "LocationNumber", "Reason"

-- Died
-- 	SELECT * 
-- 	FROM "RawCowData", "RawCowEventData"
-- 	WHERE "RawCowData"."Id" = "RawCowEventData"."RawCowDataId"
-- 	AND "Reason" = 3


	
